TITLE:: PV_Freezish
summary:: FFT-based partial bin freeze
categories:: UGens>FFT
related:: Classes/FFT, Classes/IFFT, Classes/PV_Freeze

DESCRIPTION::

PV_Freezish is based on link::Classes/PV_Freeze:: from sc3-plugins.

PV_Freeze's behavior is binary: it's either passing through the original FFT frames, or freezing a previous input frame.

PV_Freezish uses two coefficients, which should range 0.0 - 1.0. One coefficient is used for FFT bins whose magnitude is increasing, and the other for bins whose magnitude is decreasing (similar to link::Classes/Decay2::).

When a coefficient is 0.0, the output frame is equal to the current input frame. When it's 1.0, the output frame is equal to the previous output frame. Thus, if atkCoeff and dcyCoeff are equal, and always either 0 or 1, then PV_Freezish is backward compatible with PV_Freeze.

Values in between 0.0 and 1.0 will interpolate the magnitude and phase between the current input and previous output. This is like an infinite impulse response filter, except that it operates in the frequency domain.

If both the attack and decay coefficients are relatively large, the sound tends to converge onto the harmonics of the FFT's period. So it's generally recommended to use a lower attack coefficient (although a cool, quasi-reverse-reverb effect can be obtained by using a high attack coefficient and lower decay coefficient).

Coefficients may alternately be specified in terms of attack and decay time: link::#*lag::.


CLASSMETHODS::

METHOD:: new
Create a new instance.

ARGUMENT:: buffer
The FFT chain.

ARGUMENT:: atkCoeff
The coefficient to be used for bins whose magnitude is increasing (corresponding to a sound's attack).

ARGUMENT:: dcyCoeff
The coefficient to be used for bins whose magnitude is decreasing (corresponding to a sound's attack). The default is a constant negative value, in which case atkCoeff will be used in its place. This makes it possible to write a single coefficient for matching up/down behavior.


METHOD:: lag
Creates a new instance, where the coefficients are calculated from attack and decay times.

ARGUMENT:: buffer
The FFT chain.

ARGUMENT:: atkTime
60 dB convergence time for bins whose magnitude is increasing.

ARGUMENT:: dcyTime
60 dB convergence time for bins whose magnitude is decreasing.

ARGUMENT:: hop
The coefficients depend on the hop size, which is not available internally. If you're using the default hop = 0.5, then it's optional; otherwise, be sure to specify it.


EXAMPLES::

code::
s.boot;

b = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav");

(
a = {
	var sig = PlayBuf.ar(1, b, BufRateScale.ir(b), loop: 1);
	var fft = FFT(LocalBuf(512, 1), sig);
	var coeff = LFTri.kr(0.05, iphase: -1)
	.lincurve(-1, 1, -0.5, 1, -3)
	.clip(0, 1);
	fft = PV_Freezish(fft, coeff);
	(IFFT(fft) * 0.2).dup
}.play;
)

a.release;


// backward compatibility, and extension
(
a = { |lagtime = 0|
	var sig = PlayBuf.ar(1, b, BufRateScale.ir(b), loop: 1);
	var fft = FFT(LocalBuf(512, 1), sig);
	var coeff = ToggleFF.kr(Dust.kr(4)).lag(lagtime);
	fft = PV_Freezish(fft, coeff);
	(IFFT(fft) * 0.2).dup
}.play;
)

a.set(\lagtime, 0.3);  // bit of a "slide" between on/off

a.release;


// shorter attack coefficient
// so you never fully lose the source sound
(
a = {
	var sig = PlayBuf.ar(1, b, BufRateScale.ir(b), loop: 1);
	var fft = FFT(LocalBuf(512, 1), sig);
	var coeff = LFTri.kr(0.05, iphase: -1)
	.lincurve(-1, 1, -0.5, 1, -3)
	.clip(0, 1);
	fft = PV_Freezish(fft, coeff * 0.4, coeff);
	(IFFT(fft) * 0.2).dup
}.play;
)

a.release;


// ring time
(
a = {
	var sig = PlayBuf.ar(1, b, BufRateScale.ir(b), loop: 1);
	var fft = FFT(LocalBuf(512, 1), sig);
	fft = PV_Freezish.lag(fft,
		atkTime: 0.003,
		dcyTime: LFTri.kr(0.05, iphase: -1).lincurve(-1, 1, 0.5, 12, 2.5),
		hop: 0.5
	);
	(IFFT(fft) * 0.2).dup
}.play;
)

a.release;


// ring time, with bigger fft buffer and more overlap
(
a = {
	var sig = PlayBuf.ar(1, b, BufRateScale.ir(b), loop: 1);
	var fft = FFT(LocalBuf(2048, 1), sig, hop: 0.25);
	fft = PV_Freezish.lag(fft,
		atkTime: 0.003,
		dcyTime: LFTri.kr(0.05, iphase: -1).lincurve(-1, 1, 0.5, 12, 2.5),
		hop: 0.25  // IMPORTANT
	);
	(IFFT(fft) * 0.2).dup
}.play;
)

a.release;


b.free;
::
